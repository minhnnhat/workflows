name: golang-pipeline

on:
  workflow_call:
    inputs:
      # pass in environment through manual trigger, if not passed in, default to 'dev'
      env:
        required: true
        type: string
        default: 'dev'
      # working-directory is added to accommodate monorepo.  For multi repo, defaults to '.', current directory
      working-directory:
        required: false
        type: string
        default: '.'
      # JFROG_URL:
      #   required: true
      #   type: string
      #   default: '.'
      # GOLANG_REPOSITORY:
      #   required: true
      #   type: string
      #   default: '.'
      # GOLANG_IMAGE:
      #   required: true
      #   type: string
      #   default: '.'
      # GOLANG_TAG:
      #   required: true
      #   type: string
      #   default: '.'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.set-output-id.outputs.tags }}
    steps:
      - name: dump
        run: |
          echo 'github.workspace === ${{ github.workspace }}'
          echo "GITHUB_WORKSPACE === $GITHUB_WORKSPACE"
          echo 'runner.workspace === ${{ runner.workspace }}'
          echo "RUNNER_WORKSPACE === $RUNNER_WORKSPACE"

      - name: set-output
        id: set-output-id
        run: |
          VERSION=$GITHUB_RUN_NUMBER
          echo ::set-output name=tags::${VERSION}

      - name: Harden Runner
        uses: step-security/harden-runner@ebacdc22ef6c2cfb85ee5ded8f2e640f4c776dd5
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
  
  build:
    runs-on: [self-hosted]
    needs: prepare
    steps:
      - name: dump
        run: |
          echo 'github.workspace === ${{ github.workspace }}'
          echo "GITHUB_WORKSPACE === $GITHUB_WORKSPACE"
          echo 'runner.workspace === ${{ runner.workspace }}'
          echo "RUNNER_WORKSPACE === $RUNNER_WORKSPACE"

      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

  #     - name: gitleaks-action
  #       uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         driver: remote
  #         endpoint: tcp://buildkitd-headless:1234

  #     - name: Login to JFrog üê∏  
  #       uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #       with:
  #         registry: ${{ secrets.JFROG_URL }}
  #         username: ${{ secrets.JFROG_USER }}
  #         password: ${{ secrets.JFROG_PASSWORD }}
      
  #     - name: Build image
  #       run: |
  #         docker build -t ${{ secrets.JFROG_URL }}/${{ secrets.GOLANG_REPOSITORY }}/${{ secrets.GOLANG_IMAGE }}:${{ needs.prepare.outputs.tags }} .

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: '${{ secrets.JFROG_URL }}/${{ secrets.GOLANG_REPOSITORY }}/${{ secrets.GOLANG_IMAGE }}:${{ needs.prepare.outputs.tags }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: 'trivy-results.sarif'

      # - name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ secrets.JFROG_URL }}/${{ secrets.GOLANG_REPOSITORY }}/${{ secrets.GOLANG_IMAGE }}:${{ needs.prepare.outputs.tags }}
